<%
const {
    name,
    members,
    size,
    usedTypes,
    hasAnchorPoint,
    layoutModule,
    includeStructAccessors
} = locals

const StructTypeClass = `${camelize(name)}Struct`;
const StructArrayClass = `${camelize(name)}StructArray`;
const StructArrayLayoutClass = `${camelize(layoutModule)}`;
-%>
// This file is generated. Edit build/generate-struct-arrays.js, then run `node build/generate-struct-arrays.js`.
// @flow
/* eslint-disable camelcase */
<% if (includeStructAccessors) { %>
const assert = require('assert');
const {Struct} = require('../../util/struct_array');
<% } -%>
const <%=StructArrayLayoutClass%> = require('./<%=layoutModule%>');
const {register} = require('../../util/web_worker_transfer');
<% if (includeStructAccessors && hasAnchorPoint) { %>
const Point = require('@mapbox/point-geometry');
<%
}
// collect components
const components = [];
for (const member of members) {
    for (let c = 0; c < member.components; c++) {
        let name = member.name;
        if (member.components > 1) {
            name += c;
        }
        components.push({name, member, component: c});
    }
}

if (includeStructAccessors) {
-%>
class <%=StructTypeClass%> extends Struct {
<%
    // property declarations
    for (const {name} of components) {-%>
    <%=name%>: number;
<%  }
    if (hasAnchorPoint) { -%>
    anchorPoint: Point;
<%  } -%>
}
<%
for (const {name, member, component} of components) {
    const elementOffset = `this._pos${member.size.toFixed(0)}`;
    const componentOffset = (member.offset / member.size + component).toFixed(0);
    const index = `${elementOffset} + ${componentOffset}`;
    const componentAccess = `this._structArray.${member.view}[${index}]`;
-%>
(Object.defineProperty: any)(
    <%=StructTypeClass%>.prototype,
    '<%=name%>',
    {
        get: function () { return <%=componentAccess%>; },
        set: function (x) { <%=componentAccess%> = x; }
    }
);
<%
}
// Special case used for the CollisionBoxArray type
if (hasAnchorPoint) {
-%>
// https://github.com/facebook/flow/issues/285
(Object.defineProperty: any)(<%=StructTypeClass%>.prototype, 'anchorPoint', {
    get() { return new Point(this.anchorPointX, this.anchorPointY); }
});
<%
}
-%>
<%=StructTypeClass%>.prototype.size = <%=size%>;

<%
} // end 'if (includeStructAccessors)'
-%>

class <%=StructArrayClass%> extends <%=StructArrayLayoutClass%> {
<%
// component getters
for (const member of members) {
    for (let c = 0; c < member.components; c++) {
        if (!includeStructAccessors) continue;
        let name = `get${member.name}`;
        if (member.components > 1) {
            name += c;
        }
        const componentOffset = (member.offset / member.size + c).toFixed(0);
        const componentStride = size / member.size;
-%>
    <%=name%>(index: number) { return this.<%=member.view%>[index * <%=componentStride%> + <%=componentOffset%>]; }
<%
    }
}

// get(i)
if (includeStructAccessors) {
-%>
    /**
     * Return the <%=StructTypeClass%> at the given location in the array.
     * @param {number} index The index of the element.
     */
    get(index: number): <%=StructTypeClass%> {
        assert(!this.isTransferred);
        return new <%=StructTypeClass%>(this, index);
    }
<%
}
-%>
}

<%=StructArrayClass%>.prototype.members = <%-JSON.stringify(members).replace(/,/g, ', ')%>;
<% if (includeStructAccessors) { -%>
<%=StructArrayClass%>.prototype.StructType = <%=StructTypeClass%>;
<% } -%>

register('<%=StructArrayClass%>', <%=StructArrayClass%>);

module.exports = <%=StructArrayClass%>;
